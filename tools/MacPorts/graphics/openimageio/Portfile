# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0
PortGroup               github 1.0
PortGroup               cmake 1.1
PortGroup               active_variants 1.1
PortGroup               compiler_blacklist_versions 1.0
PortGroup               boost 1.0

name                    openimageio
categories              graphics
license                 BSD
maintainers             {mcalhoun @MarcusCalhoun-Lopez} openmaintainer
description             a library for reading and writing images
long_description        OpenImageIO is a library for reading and writing images, and a bunch of \
                        related classes, utilities, and applications.

# Keep this condition the same in the opencolorio, openimageio, and osl ports.
set port_latest [expr {${os.platform} ne "darwin" || ${os.major} >= 20}]
set port_latest 1

if {${port_latest}} {
    github.setup        AcademySoftwareFoundation OpenImageIO 2.5.10.1 v
    revision            1
    checksums           rmd160  acca3794870850f6d39e41e62e9370bf6ff9565b \
                        sha256  8f6a547f6a5d510737ba436f867043db537def65f0fdb14ec30e5a185b619f93 \
                        size    52061055
} else {
    github.setup        AcademySoftwareFoundation OpenImageIO 2.1.20.0 v
    revision            15
    checksums           rmd160  7f241baddcc6e731a29fb37090e4582953560f38 \
                        sha256  0ad46bda55d6357a3c474b8c8ccbb41d9732313247cffaf4a65fc50e6aad9e78 \
                        size    29116032

    livecheck.type      none
}

github.tarball_from     archive

patchfiles-append oiio-2.0.8-invalidatespec.patch
patchfiles-append oiio-2.0.8-atomic-load.patch
patchfiles-append oiio-2.3.20-strnlen.patch
patchfiles-append oiio-2.4.6-sysutil.patch
patchfiles-append oiio-2.4.6-filesystem.patch

patchfiles-append   patch-2.4.5-cmake-disable-wall-werror.diff

if {${port_latest}} {
    depends_lib-append  port:imath \
                        port:openexr
} else {
    patchfiles-append   patch-FindOpenJpeg.cmake.diff
    patchfiles-append   patch-libraw-0.21.0.diff
    patchfiles-append   patch-2.1.20-cmake-disable-wall-werror.diff

    depends_lib-append  port:field3d \
                        port:openexr2

    configure.pkg_config_path-prepend \
                        ${prefix}/libexec/openexr2/lib/pkgconfig
}

# error: multiple overloads of 'address' instantiate to the same signature 'const_pointer (const_reference) const noexcept'
# http://lists.llvm.org/pipermail/llvm-bugs/2013-November/031552.html
# Seen on OSX 10.9 and older.
compiler.blacklist-append {clang < 700}

# OpenVDB header files use C++17 features
compiler.cxx_standard   2017
configure.args-append   -DCMAKE_CXX_STANDARD=17

compiler.thread_local_storage yes

configure.cxxflags-append \
                        -Wno-deprecated-declarations \
                        -Wno-unknown-warning-option

if {[string match *clang* ${configure.compiler}]} {
    # This is a clang-specific flag:
    configure.cxxflags-append \
                        -Wno-error=unknown-warning-option
}

# NOTE: Ensure we prepend 'libfmt9', to include it before 'openexr2'
set port_libfmt         libfmt9
cmake.module_path-prepend \
                        ${prefix}/lib/${port_libfmt}/cmake
configure.args-append   -DFMT_INCLUDE_DIR=${prefix}/include/${port_libfmt}

# Don't treat clang warnings as errors
configure.args-append   -DSTOP_ON_WARNINGS=OFF

# avoid
#    ccache: error: Failed to create directory ${prefix}/var/macports/build/.ccache/tmp: Operation not permitted
configure.args-append   -DUSE_CCACHE=OFF

# do not "Try to download and build any missing dependencies"
configure.args-append   -DBUILD_MISSING_DEPS=OFF \
                        -DBUILD_MISSING_FMT=OFF

depends_lib-append      port:robin-map \
                        port:zlib \
                        port:bzip2 \
                        port:libpng \
                        port:tiff \
                        port:squish \
                        port:${port_libfmt}

# we need gcc atomics (clang >= 3.5 maybe?, gcc >= 4.8 works)
# tested with openimageio 1.4.6rc1:
# macports-clang-3.3 and later work
# gcc-4.2 doesn't work
# llvm-gcc-4.2 doesn't work
# macports-clang < 3.3 untested
# clang < 300 doesn't work
# see also https://github.com/OpenImageIO/oiio/issues/1363
compiler.blacklist-append {*gcc-3*} {*gcc-4.[0-1]} {macports-gcc-4.[2-7]} {gcc-4.[2-7]} {apple-gcc-4.[2-7]} cc {clang < 300}

# for some reason, if we compile oiio with gcc 4.9 and boost with gcc 4.2, idiff a.png b.png crashes
if {${configure.cxx_stdlib} eq "libstdc++"} {
    if {[vercmp $xcodeversion 3.0] >= 0} {
        compiler.fallback-append macports-clang-3.4
    } else {
        compiler.fallback-append macports-clang-3.3
    }
}

# GCC < 4.9 does not have proper GCC intrinsics support
compiler.blacklist-append {*gcc-4.8}
#compiler.whitelist-append macports-clang-9.0 macports-clang-8.0 macports-clang-7.0 macports-clang-6.0 macports-clang-5.0 macports-clang-4.0 macports-gcc-7 macports-gcc-6 macports-gcc-5 {*gcc-4.9}

# The PowerPC build requires GCC >= 4.9, which doesn't recognize the -arch flag, and requires libatomic
# Unfortunately, the resulting binaries don't work (at least on PPC), so we build without threads
if {${configure.build_arch} eq "ppc" || ${configure.build_arch} eq "ppc64"} {
    # there is no known working clang compiler for ppc
    compiler.blacklist-append {macports-clang*}
#    # the following removes the flag "-arch ppc" put by cmake-1.0 portgroup in the pre-configure phase
#    pre-configure {
#        configure.args-delete -DCMAKE_OSX_ARCHITECTURES="${configure.build_arch}"
#    }
#    ## -latomic is necessary on ppc for __atomic_fetch_add_8 and __atomic_exchange_8
#    configure.args-append -DCMAKE_SHARED_LINKER_FLAGS=-latomic -DCMAKE_EXE_LINKER_FLAGS=-latomic
    # env PATH=/opt/local/libexec/qt4/bin:$PATH cmake .. -DNOTHREADS=ON -DCMAKE_BUILD_TYPE=Debug -DSTOP_ON_WARNING=OFF
    configure.args-append -DNOTHREADS=ON -DSTOP_ON_WARNING=OFF
    ## uncomment the following to compile with buggy thread support
    # env PATH=/opt/local/libexec/qt4/bin:$PATH cmake .. -DCMAKE_C_COMPILER=gcc-mp-4.9 -DCMAKE_CXX_COMPILER=g++-mp-4.9 -DCMAKE_SHARED_LINKER_FLAGS=-latomic -DCMAKE_EXE_LINKER_FLAGS=-latomic -DCMAKE_BUILD_TYPE=Debug -DSTOP_ON_WARNING=OFF
    ## -latomic is necessary on ppc for __atomic_fetch_add_8 and __atomic_exchange_8
    #configure.args-append -DCMAKE_SHARED_LINKER_FLAGS=-latomic -DCMAKE_EXE_LINKER_FLAGS=-latomic
}

configure.args-append \
    -DOIIO_BUILD_TESTS:BOOL=FALSE \
    -DBOOST_ROOT=${prefix} \
    -DUSE_QT:BOOL=FALSE \
    -DUSE_PYTHON:BOOL=FALSE \
    -DUSE_PYTHON3:BOOL=FALSE \
    -DUSE_FIELD3D:BOOL=FALSE \
    -DUSE_FFMPEG:BOOL=FALSE \
    -DUSE_OPENJPEG:BOOL=FALSE \
    -DUSE_OCIO:BOOL=FALSE \
    -DUSE_OPENCV:BOOL=FALSE \
    -DUSE_OPENSSL:BOOL=FALSE \
    -DUSE_FREETYPE:BOOL=FALSE \
    -DUSE_GIF:BOOL=TRUE \
    -DUSE_HEIF:BOOL=TRUE \
    -DUSE_PTEX:BOOL=FALSE \
    -DUSE_LIBRAW:BOOL=TRUE \
    -DUSE_OPENGL:BOOL=FALSE \
    -DUSE_WEBP:BOOL=TRUE \
    -DUSE_JXL:BOOL=FALSE \
    -DBUILD_FMT_FORCE:BOOL=TRUE \
    -DSTOP_ON_WARNING:BOOL=FALSE
 
# optional components

if {${os.platform} eq "darwin" && ${os.major} < 11} {
    configure.args-append \
                        -DUSE_QT=OFF
    # configure.args-append -DUSE_OPENGL=OFF
}

if {[string match *gcc* ${configure.compiler}] \
    && ${configure.build_arch} in [list i386 ppc]} {
    configure.ldflags-append \
                        -latomic
}

default_variants    +opencolorio +openjpeg +freetype

variant natron conflicts ffmpeg qt5 dicom openvdb ptex dicom requires opencolorio openjpeg freetype jxl description {Natron version} {
    if {${configure.cxx_stdlib} eq "libstdc++"} {
    }
}

configure.args-append   -DUSE_PYTHON=OFF

set pythons_suffixes    {38 39 310 311 312}

set pythons_ports       {}
foreach s ${pythons_suffixes} {
    lappend pythons_ports python${s}
}

foreach s ${pythons_suffixes} {
    set p python${s}
    set v [string index ${s} 0].[string range ${s} 1 end]
    set i [lsearch -exact ${pythons_ports} ${p}]
    set c [lreplace ${pythons_ports} ${i} ${i}]
    variant ${p} description "Build the Python ${v} bindings" conflicts {*}${c} "
        depends_build-append    port:pybind11
        depends_lib-append      port:${p} \
                                port:py${s}-numpy

        configure.args-delete   -DUSE_PYTHON=OFF

        configure.args-append   -DPYTHON_VERSION=${v} \
                                -DPYTHON_EXECUTABLE=${prefix}/bin/python${v} \
                                -DPYTHON_SITE_DIR=${frameworks_dir}/Python.framework/Versions/${v}/lib/python${v}
    "
}

set set_python_default  yes
foreach s ${pythons_suffixes} {
    if {[variant_isset python${s}]} {
        set set_python_default  no
    }
}
# this default version should stay synchronized with python_get_default_version
#    in the python PortGroup
if {${set_python_default}} {
    default_variants        +python312
}

#configure.args-append       -DUSE_FFMPEG=OFF
variant ffmpeg description {Add FFmpeg support.} {
    configure.args-delete       -DUSE_FFMPEG:BOOL=FALSE
    configure.args-append       -DUSE_FFMPEG:BOOL=TRUE
if {${port_latest}} {
    set ffmpeg_ver 6

    #configure.args-append       -DUSE_FFMPEG=OFF
    depends_lib-append          port:ffmpeg${ffmpeg_ver}

    configure.pkg_config_path-prepend \
                        ${prefix}/libexec/ffmpeg${ffmpeg_ver}/lib/pkgconfig
} else {
    #configure.args-append       -DUSE_FFMPEG=OFF
    depends_lib-append          path:lib/libavcodec.dylib:ffmpeg
}
}


#configure.args-append       -DUSE_JPEGTURBO=OFF
depends_lib-append          path:include/turbojpeg.h:libjpeg-turbo \

#configure.args-append       -DUSE_OPENJPEG=OFF
variant openjpeg description {Add OpenJPEG support.} {
depends_lib-append          port:openjpeg
configure.args-append       -DOpenJpeg_ROOT=${prefix}
    configure.args-delete       -DUSE_OPENJPEG:BOOL=FALSE
    configure.args-append       -DUSE_OPENJPEG:BOOL=TRUE -DOPENJPEG_HOME=${prefix} -DOPENJPEG_INCLUDE_DIR=`pkg-config --variable=includedir libopenjp2`
}

#configure.args-append       -DUSE_OCIO=OFF
variant opencolorio description {Add OpenColorIO support.} {
depends_lib-append          port:opencolorio
    configure.args-delete       -DUSE_OCIO:BOOL=FALSE
    configure.args-append       -DUSE_OCIO:BOOL=TRUE
}

variant opencv description {Use OpenCV.} {
set opencv_ver 4
if {${os.platform} eq "darwin" && ${os.major} < 11} {
    # opencv4 does not build on 10.6 and earlier.
    configure.args-append   -DUSE_OPENCV=OFF
} else {
    depends_lib-append      path:lib/opencv${opencv_ver}/libopencv_core.dylib:opencv${opencv_ver}
    configure.args-append   -DOpenCV_INCLUDE_DIR=${prefix}/include/opencv${opencv_ver} \
                            -DOpenCV_ROOT=${prefix}/lib/opencv${opencv_ver}
}
    configure.args-delete -DUSE_OPENCV:BOOL=FALSE
    configure.args-append -DUSE_OPENCV:BOOL=TRUE
}

#configure.args-append       -DUSE_FREETYPE=OFF
variant freetype description {Use FreeType.} {
depends_lib-append          port:freetype
    configure.args-delete -DUSE_FREETYPE:BOOL=FALSE
    configure.args-append -DUSE_FREETYPE:BOOL=TRUE -DFREETYPE_INCLUDE_DIRS=${prefix}/include/freetype2
}

#configure.args-append       -DUSE_GIF=OFF
depends_lib-append          port:giflib

#configure.args-append       -DUSE_HEIF=OFF
depends_lib-append          port:libheif

#configure.args-append       -DUSE_PTEX=OFF
variant ptex description {Use PTex.} {
depends_lib-append          port:ptex
    configure.args-delete -DUSE_PTEX:BOOL=FALSE
    configure.args-append -DUSE_PTEX:BOOL=TRUE
}

#configure.args-append       -DUSE_LIBRAW=OFF
depends_lib-append          port:libraw

variant openvdb description {Use OpenVDB.} {
    if {${port_latest}} {
        depends_lib-append          port:openvdb \
                                    port:onetbb
        configure.args-append       -DTBB_ROOT=${prefix}/libexec/onetbb
        configure.args-delete -DUSE_OPENVDB:BOOL=FALSE
        configure.args-append -DUSE_OPENVDB:BOOL=TRUE
    } else {
        depends_lib-append          port:openvdb \
                                    port:tbb
        # https://trac.macports.org/ticket/69842
        #configure.args-append       -DUSE_OPENVDB=OFF

        configure.args-append       -DTBB_ROOT=${prefix}/libexec/tbb
    }
    configure.args-delete -DUSE_TBB:BOOL=FALSE
    configure.args-append -DUSE_TBB:BOOL=TRUE
}

variant jxl description {Use JPEG-XL.} {
depends_lib-append          port:libjxl
    configure.args-delete -DUSE_JXL:BOOL=FALSE
    configure.args-append -DUSE_JXL:BOOL=TRUE
}

# not in MacPorts
configure.args-append       -DUSE_NUKE=OFF

#configure.args-append       -DUSE_DICOM=OFF
variant dicom description {Use DICOM from dcmtk.} {
depends_lib-append          port:dcmtk
    configure.args-delete -DUSE_DICOM:BOOL=FALSE
    configure.args-append -DUSE_DICOM:BOOL=TRUE
}

#configure.args-append       -DUSE_WEBP=OFF
depends_lib-append          port:webp

github.livecheck.regex      {([0-9.]+)}
